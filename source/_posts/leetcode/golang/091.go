package leetcode

// 一条包含字母 A-Z 的消息通过以下方式进行了编码：
//
// 'A' -> 1
// 'B' -> 2
// ...
// 'Z' -> 26
// 给定一个只包含数字的非空字符串，请计算解码方法的总数。
//
// 示例 1:
//
// 输入: "12"
// 输出: 2
// 解释: 它可以解码为 "AB"（1 2）或者 "L"（12）。
// 示例 2:
//
// 输入: "226"
// 输出: 3
// 解释: 它可以解码为 "BZ" (2 26), "VF" (22 6), 或者 "BBF" (2 2 6) 。

type s struct{}

var m = map[string]s{
	"1":  s{},
	"2":  s{},
	"3":  s{},
	"4":  s{},
	"5":  s{},
	"6":  s{},
	"7":  s{},
	"8":  s{},
	"9":  s{},
	"01": s{},
	"02": s{},
	"03": s{},
	"04": s{},
	"05": s{},
	"06": s{},
	"07": s{},
	"08": s{},
	"09": s{},
	"10": s{},
	"11": s{},
	"12": s{},
	"13": s{},
	"14": s{},
	"15": s{},
	"16": s{},
	"17": s{},
	"18": s{},
	"19": s{},
	"20": s{},
	"21": s{},
	"22": s{},
	"23": s{},
	"24": s{},
	"25": s{},
	"26": s{},
}

// NumDecodings091 解码方法
// dp[i] = m[string([]byte{s[i-1], s[i]})] ? dp[i-1] + 1 : dp[i]
// 注意对0的处理
func NumDecodings091(s string) int {
	if s[0] == '0' {
		return 0
	}

	l := len(s)

	if l == 1 {
		return 1
	}

	dp := make([]int, l+1)

	dp[0] = 1

	for i := 1; i <= l; i++ {
		if s[i-1] == '0' {
			dp[i] = 0
		} else {
			dp[i] = dp[i-1]
		}

		if i-1 > 0 && ((s[i-2] == '1') || (s[i-2] == '2' && s[i-1] <= '6')) {
			dp[i] += dp[i-2]
		}
	}

	return dp[l]
}
