#+HUGO_BASE_DIR: ../../../../
#+HUGO_SECTION: posts/ostep/v-cpu
#+HUGO_TAGS: 操作系统导论
#+HUGO_CATEGORIES:
#+HUGO_DRAFT: nil
#+HUGO_AUTO_SET_LASTMOD: nil

#+DATE: 2020-09-07
#+TITLE: OSTEP - CPU虚拟化
#+AUTHOR: LIYUNFAN
#+DESCRIPTION: 操作系统通过时分共享技术来共享资源。通过允许一个程序使用一小段时间，然后再给到另一个程序使用一小段时间来共享，让所有程序觉得自己有一个属于自己的CPU。

操作系统通过时分共享技术来共享资源。通过允许一个程序使用一小段时间，然后再给到另一个程序使用一小段时间来共享，让所有程序觉得自己有一个属于自己的CPU。

<!--more-->

操作系统对于CPU要面临的问题
1. CPU同一时间只能运行一个程序（操作系统也属于程序），那么操作系统如何重新获得对CPU的使用权？
2. 解决了操作系统对CPU使用权后，操作系统需要高效、公平的把CPU分给不同的程序去使用。如何保证高效、公平？

* 操作系统如何保证对CPU的控制权

操作系统需要公平的把CPU分配给不同的程序，但是在分配前，操作系统需要可以通过手段重新获得CPU的使用权。

但是如果一个进程在CPU上运行，这就意味着操作系统没有运行。如果操作系统没有运行，那操作系统怎么工作呢？

*** 协作方式：等待系统调用

早期的某些系统采用这种方式。对于一个友好的进程想要把CPU转给操作系统，只要进行一次系统调用（例如打开读取某个文件），一般情况这类系统会自带一个yield系统调用，只是单纯的将控制权交给操作系统。

除此之外，应用程序如果执行了某些预定义好的非法操作，也会将CPU转给操作系统。此类操作通过在陷阱表中定义，在操作系统启动时由硬件记住该类操作和对此类操作处理的代码地址。

然而如果某个恶意程序，从来不进行系统调用，或者是代码有问题陷入了死循环，那可能只能重新启动了。

所以我们需要一种手段来对付这种情况。

*** 非协作方式：操作系统进行控制

现在问题来了，流氓程序不主动归还控制权，操作系统该如何重获控制权呢？

答案很简单，使用时钟中断。时钟设备可以编程为每隔几毫秒产生一次中断，操作系统预先配置对该中断的处理程序，在发生中断时重获CPU控制权。

再之后操作系统便可以做它想做的事儿，比如将CPU给其他程序进行使用。

*** 时钟中断时的问题

*操作系统如何知道如何处理硬件时钟中断？*

操作系统启动时是在内核模式下执行的，所以可以根据需要来配置机器硬件。操作系统在启动时会告诉硬件在发生某些异常事件时运行哪些代码，并通过指令通知硬件这些代码的位置，而硬件会记住这些代码的位置，直到下次机器重启。

*时钟中断后正在运行程序的上下文怎么办？*

操作系统必须为当前正在运行的程序负责，在发生硬件时钟中断后，操作系统会为正在运行的程序保存足够的状态，以便随后从陷阱返回指令能够正确恢复正在运行的程序。

* 操作系统的CPU调度算法

在之前我一直都认为，CPU的调度无非就是不停地在任务之间轮转。
每个程序可以使用一小段时间的CPU（时钟中断），然后将操作系统将会把CPU交给其他程序使用。

然而实际上与我想的大有不同。CPU的调度采用了 *多级反馈队列* 的方式， *轮转* 只是该实现方式中的一部分。

它的基本运行规则如下
1. 如果A的优先级 > B的优先级，运行A。
2. 如果A的优先级 = B的优先级，轮转运行A和B。
3. 新的作业进入系统时，放到最高的优先级队列中。
4. 一旦工作在某个级别中运行时间超过限额，降低其优先级。
5. 每过一段时间，将系统中所有的作业重新加入到最高优先级的队列中。

在该算法中，第2条规则保证了良好的响应速度额。

第1、3、4条规则，将可能会长时间使用CPU的工作尽量的往后放，保证了短任务的执行周期。

同时第5条规则避免了在某个时间段有大量短时任务占用CPU导致长时使用CPU的任务无法获得CPU，保证了长任务的执行周期和响应速度。

在当前的操作系统中，这些都是十分有必要的。(想想一下，你执行了一个非常耗时需要大量运算的任务，但这中间还需要与他人进行沟通，共同处理日常工作上事务。)

* 多处理器调度

实际上我们现在的电脑大多都拥有多核处理器，而在这种情况下，操作系统需要处理更复杂的情况。

*共享内存*

在某些情况下，处理器们可能会对同一块内存在同时间内进行读写，这里显然是需要加锁的。

*缓存亲和*

一个进程在某个CPU上运行时，CPU的缓存中会维护该进程的很多状态。

如果可以的话，下次该进程还是会到该CPU上运行，因为这样CPU不必重新加载数据会很快。而如果切换了CPU执行，则需要重新加载。

因此操作系统需要考虑到这种缓存亲和，尽可能保持程序在一个CPU上


** 单任务队列调度

我们可以考虑使用一个任务队列来提供任务给多个CPU进行处理。这种方案比较简单。

但简单的同时也拥有一定的问题。

一方面，对于多CPU并发获取任务时，需要通过锁来保证原子性，伴随CPU数量增加，用于锁的消耗也会越来越大。

另一方面对CPU缓存亲和性也不是很友好。假如我们有5个循环的任务，任务队列为A B C D E A B...，他们在一个拥有4个CPU的操作系统上执行。
此时CPU每次获取到的任务都与前一次不同，与缓存亲和的目标背道而驰。

不过可以通过一些亲和机制来避免上述问题，让CPU尽量选择与自己前一个工作相同的工作，但同时保证对所有任务都尽量的公平。例如，对于前面的例子，可以使用如下方案

#+BEGIN_SRC text
  CPU0 A E A A A ...
  CPU1 B B E B B ...
  CPU2 C C C E C ...
  CPU3 D D D D E ...
#+END_SRC

但这种机制实现起来是有一定复杂度的。

** 多任务队列调度

使用多个任务队列来提供给多个CPU任务进行处理，例如每个CPU一个队列。

在这种情况下，队列锁的问题得以解决，除此之外，缓存亲和问题也比较容易得到解决，操作系统可以每次都把该任务分配到该队列上。

但同时也产生了一些其他问题。

比如当有3个任务A、B、C和2个CPU时，某个CPU上的任务A会独享所有CPU时间，而另一个CPU上的任务B、C却只能拥有一半的CPU时间。这并非轮转执行期望的结果。

在执行一段时间后，如果A执行完毕了，则A所在的CPU会处于闲置状态，CPU负载上出现了不均衡。

而对于这种情况，操作系统可能需要进行一些违背缓存亲和的操作。通过检查其他CPU队列上的任务，将繁忙CPU队列的任务“窃取”到空闲CPU上执行。

但“检查”操作也会消耗性能，且CPU数量越多消耗的也越多。所以检查的时间间隔的设置也是需要考虑的。

* 总结

操作系统对于CPU虚拟化是十分复杂的，需要对危险的操作进行限制，需要在众多调度方法和参数中寻找周期和响应时间的平衡。

而能想出这些处理方案的那群人，是真的牛逼...
